/**
 * Admin Remmailleuse - Interface d'administration
 * Gestion du contenu, des m√©dias et des param√®tres
 */

class AdminApp {
    constructor() {
        this.data = {};
        this.hasUnsavedChanges = false;
        this.currentSection = 'hero-section';
        this.autosaveInterval = null;
        this.init();
    }

    async init() {
        try {
            // V√©rifier l'authentification d'abord
            const authCheck = await this.checkAuthentication();
            if (!authCheck) {
                window.location.href = './login.html';
                return;
            }
            
            this.showLoading();
            await this.loadData();
            this.setupEventListeners();
            this.populateFields();
            this.setupAutosave();
            this.setupAuthRefresh();
            this.hideLoading();
            this.showStatus('üéâ Interface d\'administration charg√©e !', 'success');
        } catch (error) {
            // Erreur d'initialisation admin
            this.hideLoading();
            this.showStatus('‚ùå Erreur de chargement de l\'administration', 'error');
        }
    }

    // ===== AUTHENTIFICATION =====
    async checkAuthentication() {
        try {
            const response = await fetch('../api/auth.php?action=check');
            const data = await response.json();
            return data.authenticated === true;
        } catch (error) {
            // Erreur de v√©rification d'authentification
            return false;
        }
    }

    setupAuthRefresh() {
        // Rafra√Æchir la session toutes les 30 minutes
        setInterval(async () => {
            try {
                const response = await fetch('../api/auth.php?action=refresh', {
                    method: 'POST'
                });
                if (!response.ok) {
                    window.location.href = './login.html';
                }
            } catch (error) {
                // Erreur de rafra√Æchissement de session
            }
        }, 30 * 60 * 1000);
    }

    // ===== CHARGEMENT DES DONN√âES =====
    async loadData() {
        try {
            const [contentResponse, servicesResponse, galleryResponse, settingsResponse] = await Promise.all([
                fetch('../data/content.json').catch(() => ({ ok: false })),
                fetch('../data/services.json').catch(() => ({ ok: false })),
                fetch('../data/gallery.json').catch(() => ({ ok: false })),
                fetch('../data/settings.json').catch(() => ({ ok: false }))
            ]);

            this.data = {
                content: contentResponse.ok ? await contentResponse.json() : this.getDefaultContent(),
                services: servicesResponse.ok ? await servicesResponse.json() : this.getDefaultServices(),
                gallery: galleryResponse.ok ? await galleryResponse.json() : this.getDefaultGallery(),
                settings: settingsResponse.ok ? await settingsResponse.json() : this.getDefaultSettings()
            };

            // Donn√©es charg√©es
        } catch (error) {
            // Erreur lors du chargement
            this.data = {
                content: this.getDefaultContent(),
                services: this.getDefaultServices(),
                gallery: this.getDefaultGallery(),
                settings: this.getDefaultSettings()
            };
        }
    }

    getDefaultContent() {
        return {
            hero: {
                title: "L'art de redonner vie √† vos tissus pr√©cieux",
                subtitle: "Remaillage traditionnel & r√©paration invisible depuis plus de 20 ans",
                cta: {
                    text: "D√©couvrir mon savoir-faire",
                    link: "#expertise"
                }
            },
            expertise: {
                intro: {
                    name: "Mme Monod, Artisane Remmailleuse",
                    description: [
                        "Passionn√©e par les techniques traditionnelles de remaillage, je redonne vie √† vos tissus et lainages les plus pr√©cieux. Mon travail consiste √† r√©parer minutieusement chaque maille avec une loupe et un crochet minuscule, remontant maille par maille les lainages endommag√©s.",
                        "Que ce soit pour refermer un trou de mite avec la plus grande minutie ou effectuer du raccommodage avec ma fid√®le machine Elna vintage, j'apporte le plus grand soin √† r√©nover vos tissus √† l'identique."
                    ]
                },
                process: [
                    { step: 1, icon: "üîç", title: "Diagnostic", description: "Analyse minutieuse de la pi√®ce pour d√©terminer la meilleure technique de r√©paration" },
                    { step: 2, icon: "üßµ", title: "Remaillage", description: "Reconstruction maille par maille avec loupe et outils traditionnels" },
                    { step: 3, icon: "‚ú®", title: "Finition", description: "R√©paration invisible qui redonne une seconde vie √† votre v√™tement" }
                ]
            },
            contact: {
                addresses: [
                    { country: "üá®üá≠", title: "Suisse", address: "Chemin des Clavins 3", city: "2108 Couvet" },
                    { country: "üá´üá∑", title: "France", address: "Poste restante, 17 Rue de Franche Comt√©", city: "25300 Verri√®res-de-Joux" }
                ],
                phones: ["+41 32.863.15.31", "+41 79.636.23.22"],
                email: "contact@remmailleuse.com",
                delays: "2 √† 5 jours selon r√©paration"
            }
        };
    }

    getDefaultServices() {
        return {
            services: [
                { id: "remaillage", icon: "üßµ", name: "Remaillage classique", description: "Reconstruction maille par maille pour lainages", price: "15-40‚Ç¨" },
                { id: "mite", icon: "üîç", name: "Trous de mite", description: "R√©paration invisible minutieuse", price: "20-35‚Ç¨" },
                { id: "bas", icon: "üß¶", name: "Bas de contention", description: "Raccommodage machine sp√©cialis√©e", price: "15-25‚Ç¨" },
                { id: "renovation", icon: "‚ú®", name: "R√©novation tissus", description: "Restauration √† l'identique", price: "Sur devis" }
            ]
        };
    }

    getDefaultGallery() {
        return {
            categories: [
                { id: "tous", name: "Tous", active: true },
                { id: "pulls", name: "Pulls" },
                { id: "bas", name: "Bas de contention" },
                { id: "delicats", name: "Tissus d√©licats" }
            ],
            items: [
                { id: "pull-cachemire", category: "pulls", title: "Pull en cachemire", description: "R√©paration invisible d'un trou de mite", icon: "üß•" },
                { id: "bas-contention", category: "bas", title: "Bas de contention", description: "Remaillage pr√©cis avec machine Elna", icon: "üß¶" },
                { id: "robe-vintage", category: "delicats", title: "Robe vintage", description: "Restauration compl√®te d'une pi√®ce d'√©poque", icon: "üëó" },
                { id: "echarpe-soie", category: "delicats", title: "√âcharpe en soie", description: "R√©paration d√©licate de tissus fins", icon: "üß£" }
            ]
        };
    }

    getDefaultSettings() {
        return {
            site: {
                name: "Remmailleuse",
                description: "L'art traditionnel du remaillage pour redonner vie √† vos tissus pr√©cieux",
                keywords: "remaillage, r√©paration, tissus, lainages, artisan"
            },
            theme: {
                colors: {
                    primary: "#D4896B",
                    secondary: "#9CAF9A",
                    accent: "#8B6F47",
                    neutral: "#F5F1EB"
                }
            },
            seo: {
                title: "Remmailleuse - R√©paration de tissus et lainages",
                description: "Artisane sp√©cialis√©e en remaillage traditionnel. R√©paration invisible de pulls, bas de contention et tissus d√©licats en Suisse et France."
            }
        };
    }

    // ===== POPULATION DES CHAMPS =====
    populateFields() {
        this.populateHeroFields();
        this.populateExpertiseFields();
        this.populateContactFields();
        this.populateSettingsFields();
        this.renderProcessSteps();
        this.renderGalleryItems();
        this.renderServiceItems();
    }

    populateHeroFields() {
        const hero = this.data.content.hero;
        this.setFieldValue('hero-title', hero.title);
        this.setFieldValue('hero-subtitle', hero.subtitle);
        this.setFieldValue('hero-cta-text', hero.cta.text);
        this.setFieldValue('hero-cta-link', hero.cta.link);
    }

    populateExpertiseFields() {
        const expertise = this.data.content.expertise;
        this.setFieldValue('expert-name', expertise.intro.name);
        this.setFieldValue('expert-desc-1', expertise.intro.description[0] || '');
        this.setFieldValue('expert-desc-2', expertise.intro.description[1] || '');
    }

    populateContactFields() {
        const contact = this.data.content.contact;
        
        if (contact.addresses[0]) {
            this.setFieldValue('address-ch', contact.addresses[0].address);
            this.setFieldValue('city-ch', contact.addresses[0].city);
        }
        
        if (contact.addresses[1]) {
            this.setFieldValue('address-fr', contact.addresses[1].address);
            this.setFieldValue('city-fr', contact.addresses[1].city);
        }
        
        this.setFieldValue('phone-1', contact.phones[0] || '');
        this.setFieldValue('phone-2', contact.phones[1] || '');
        this.setFieldValue('contact-email', contact.email);
        this.setFieldValue('repair-delays', contact.delays);
    }

    populateSettingsFields() {
        const settings = this.data.settings;
        this.setFieldValue('site-name', settings.site?.name || '');
        this.setFieldValue('site-description', settings.seo?.description || '');
        this.setFieldValue('site-keywords', settings.seo?.keywords || '');
        
        if (settings.theme?.colors) {
            this.setFieldValue('color-primary', settings.theme.colors.primary);
            this.setFieldValue('color-secondary', settings.theme.colors.secondary);
            this.setFieldValue('color-accent', settings.theme.colors.accent);
            this.setFieldValue('color-neutral', settings.theme.colors.neutral);
        }
    }

    setFieldValue(fieldId, value) {
        const field = document.getElementById(fieldId);
        if (field && value !== undefined) {
            field.value = value;
        }
    }

    // ===== RENDU DES √âL√âMENTS DYNAMIQUES =====
    renderProcessSteps() {
        const container = document.getElementById('process-steps-admin');
        if (!container) return;

        const steps = this.data.content.expertise.process || [];
        
        container.innerHTML = steps.map((step, index) => `
            <div class="process-step-admin" data-step-index="${index}">
                <input type="text" class="step-icon-input" value="${step.icon}" placeholder="üîç" 
                       onchange="adminApp.updateProcessStep(${index}, 'icon', this.value)">
                <div class="step-details">
                    <input type="text" class="form-input mb-1" value="${step.title}" placeholder="Titre de l'√©tape"
                           onchange="adminApp.updateProcessStep(${index}, 'title', this.value)">
                    <textarea class="form-input" rows="2" placeholder="Description de l'√©tape"
                              onchange="adminApp.updateProcessStep(${index}, 'description', this.value)">${step.description}</textarea>
                </div>
                <div class="flex flex-wrap gap-1">
                    <div class="step-number">${step.step}</div>
                    <button class="btn btn-error btn-sm" onclick="adminApp.removeProcessStep(${index})">üóëÔ∏è</button>
                </div>
            </div>
        `).join('');
    }

    renderGalleryItems() {
        const container = document.getElementById('gallery-admin');
        if (!container) return;

        const items = this.data.gallery.items || [];
        
        container.innerHTML = `
            <div class="gallery-admin">
                ${items.map((item, index) => `
                    <div class="gallery-item-admin" data-item-index="${index}">
                        <div class="gallery-preview">
                            ${item.images?.before ? 
                                `<img src="${item.images.before}" alt="${item.title}">` :
                                `<div style="font-size: 3rem;">${item.icon}</div>`
                            }
                            <input type="file" accept="image/*" onchange="adminApp.handleImageUpload(${index}, this)">
                        </div>
                        <div class="gallery-info">
                            <input type="text" class="form-input mb-1" value="${item.title}" placeholder="Nom de la r√©alisation"
                                   onchange="adminApp.updateGalleryItem(${index}, 'title', this.value)">
                            <textarea class="form-input mb-1" rows="2" placeholder="Description"
                                      onchange="adminApp.updateGalleryItem(${index}, 'description', this.value)">${item.description}</textarea>
                            <select class="form-input mb-1" onchange="adminApp.updateGalleryItem(${index}, 'category', this.value)">
                                ${this.data.gallery.categories.map(cat => 
                                    `<option value="${cat.id}" ${item.category === cat.id ? 'selected' : ''}>${cat.name}</option>`
                                ).join('')}
                            </select>
                            <div class="gallery-actions">
                                <button class="btn btn-outline btn-sm">üì∑ Photo avant</button>
                                <button class="btn btn-outline btn-sm">üì∑ Photo apr√®s</button>
                                <button class="btn btn-error btn-sm" onclick="adminApp.removeGalleryItem(${index})">üóëÔ∏è</button>
                            </div>
                        </div>
                    </div>
                `).join('')}
            </div>
        `;
    }

    renderServiceItems() {
        const container = document.getElementById('services-admin');
        if (!container) return;

        const services = this.data.services.services || [];
        
        container.innerHTML = `
            <div class="services-admin">
                ${services.map((service, index) => `
                    <div class="service-item-admin" data-service-index="${index}">
                        <input type="text" class="service-icon-input" value="${service.icon}" placeholder="üßµ"
                               onchange="adminApp.updateService(${index}, 'icon', this.value)">
                        <div class="service-details">
                            <input type="text" class="form-input mb-1" value="${service.name}" placeholder="Nom du service"
                                   onchange="adminApp.updateService(${index}, 'name', this.value)">
                            <textarea class="form-input" rows="2" placeholder="Description"
                                      onchange="adminApp.updateService(${index}, 'description', this.value)">${service.description}</textarea>
                        </div>
                        <div>
                            <input type="text" class="form-input service-price-input text-center mb-2" value="${service.price}" placeholder="Prix"
                                   onchange="adminApp.updateService(${index}, 'price', this.value)">
                            <button class="btn btn-error btn-sm" onclick="adminApp.removeService(${index})">üóëÔ∏è Supprimer</button>
                        </div>
                    </div>
                `).join('')}
            </div>
        `;
    }

    // ===== GESTION DES SECTIONS =====
    showSection(sectionId, linkElement) {
        // Masquer toutes les sections
        document.querySelectorAll('.admin-section').forEach(section => {
            section.classList.remove('active');
        });
        
        // D√©sactiver tous les liens
        document.querySelectorAll('.sidebar-link').forEach(link => {
            link.classList.remove('active');
        });
        
        // Afficher la section demand√©e
        const section = document.getElementById(sectionId);
        if (section) {
            section.classList.add('active');
            this.currentSection = sectionId;
        }
        
        // Activer le lien cliqu√©
        if (linkElement) {
            linkElement.classList.add('active');
        }
    }

    // ===== MISE √Ä JOUR DES DONN√âES =====
    updateProcessStep(index, field, value) {
        if (!this.data.content.expertise.process[index]) return;
        
        this.data.content.expertise.process[index][field] = value;
        this.markAsChanged();
    }

    updateGalleryItem(index, field, value) {
        if (!this.data.gallery.items[index]) return;
        
        this.data.gallery.items[index][field] = value;
        this.markAsChanged();
    }

    updateService(index, field, value) {
        if (!this.data.services.services[index]) return;
        
        this.data.services.services[index][field] = value;
        this.markAsChanged();
    }

    addProcessStep() {
        const newStep = {
            step: this.data.content.expertise.process.length + 1,
            icon: "üÜï",
            title: "Nouvelle √©tape",
            description: "Description de la nouvelle √©tape"
        };
        
        this.data.content.expertise.process.push(newStep);
        this.renderProcessSteps();
        this.markAsChanged();
        this.showStatus('‚ûï Nouvelle √©tape ajout√©e !', 'success');
    }

    removeProcessStep(index) {
        this.confirmAction(
            'Supprimer l\'√©tape',
            '√ätes-vous s√ªr de vouloir supprimer cette √©tape ?',
            () => {
                this.data.content.expertise.process.splice(index, 1);
                // R√©organiser les num√©ros d'√©tapes
                this.data.content.expertise.process.forEach((step, i) => {
                    step.step = i + 1;
                });
                this.renderProcessSteps();
                this.markAsChanged();
                this.showStatus('üóëÔ∏è √âtape supprim√©e', 'warning');
            }
        );
    }

    addGalleryItem() {
        const newItem = {
            id: `item-${Date.now()}`,
            category: "tous",
            title: "Nouvelle r√©alisation",
            description: "Description de la nouvelle r√©alisation",
            icon: "üì∑"
        };
        
        this.data.gallery.items.push(newItem);
        this.renderGalleryItems();
        this.markAsChanged();
        this.showStatus('‚ûï Nouvelle r√©alisation ajout√©e !', 'success');
    }

    removeGalleryItem(index) {
        this.confirmAction(
            'Supprimer la r√©alisation',
            '√ätes-vous s√ªr de vouloir supprimer cette r√©alisation ?',
            () => {
                this.data.gallery.items.splice(index, 1);
                this.renderGalleryItems();
                this.markAsChanged();
                this.showStatus('üóëÔ∏è R√©alisation supprim√©e', 'warning');
            }
        );
    }

    addService() {
        const newService = {
            id: `service-${Date.now()}`,
            icon: "üÜï",
            name: "Nouveau service",
            description: "Description du nouveau service",
            price: "Sur devis"
        };
        
        this.data.services.services.push(newService);
        this.renderServiceItems();
        this.markAsChanged();
        this.showStatus('‚ûï Nouveau service ajout√© !', 'success');
    }

    removeService(index) {
        this.confirmAction(
            'Supprimer le service',
            '√ätes-vous s√ªr de vouloir supprimer ce service ?',
            () => {
                this.data.services.services.splice(index, 1);
                this.renderServiceItems();
                this.markAsChanged();
                this.showStatus('üóëÔ∏è Service supprim√©', 'warning');
            }
        );
    }

    // ===== GESTION DES IMAGES =====
    handleImageUpload(itemIndex, input) {
        const file = input.files[0];
        if (!file) return;

        if (file.size > 5 * 1024 * 1024) { // 5MB max
            this.showStatus('‚ùå Image trop volumineuse (max 5MB)', 'error');
            return;
        }

        if (!file.type.startsWith('image/')) {
            this.showStatus('‚ùå Le fichier doit √™tre une image', 'error');
            return;
        }

        const reader = new FileReader();
        reader.onload = (e) => {
            // Mettre √† jour l'affichage
            const preview = input.parentElement.querySelector('img');
            if (preview) {
                preview.src = e.target.result;
            } else {
                input.parentElement.innerHTML = `<img src="${e.target.result}" alt="Preview">`;
            }
            
            // Sauvegarder en base64 (pour demo, en production on uploadrait sur le serveur)
            if (!this.data.gallery.items[itemIndex].images) {
                this.data.gallery.items[itemIndex].images = {};
            }
            this.data.gallery.items[itemIndex].images.before = e.target.result;
            
            this.markAsChanged();
            this.showStatus('üì∑ Image mise √† jour !', 'success');
        };
        
        reader.readAsDataURL(file);
    }

    // ===== SAUVEGARDE =====
    collectFormData() {
        // Hero
        this.data.content.hero.title = this.getFieldValue('hero-title');
        this.data.content.hero.subtitle = this.getFieldValue('hero-subtitle');
        this.data.content.hero.cta.text = this.getFieldValue('hero-cta-text');
        this.data.content.hero.cta.link = this.getFieldValue('hero-cta-link');

        // Expertise
        this.data.content.expertise.intro.name = this.getFieldValue('expert-name');
        this.data.content.expertise.intro.description = [
            this.getFieldValue('expert-desc-1'),
            this.getFieldValue('expert-desc-2')
        ].filter(desc => desc.trim());

        // Contact
        this.data.content.contact.addresses[0] = {
            country: "üá®üá≠",
            title: "Suisse",
            address: this.getFieldValue('address-ch'),
            city: this.getFieldValue('city-ch')
        };
        
        this.data.content.contact.addresses[1] = {
            country: "üá´üá∑",
            title: "France", 
            address: this.getFieldValue('address-fr'),
            city: this.getFieldValue('city-fr')
        };
        
        this.data.content.contact.phones = [
            this.getFieldValue('phone-1'),
            this.getFieldValue('phone-2')
        ].filter(phone => phone.trim());
        
        this.data.content.contact.email = this.getFieldValue('contact-email');
        this.data.content.contact.delays = this.getFieldValue('repair-delays');

        // Settings
        this.data.settings.site.name = this.getFieldValue('site-name');
        this.data.settings.seo.description = this.getFieldValue('site-description');
        this.data.settings.seo.keywords = this.getFieldValue('site-keywords');
        
        this.data.settings.theme.colors = {
            primary: this.getFieldValue('color-primary'),
            secondary: this.getFieldValue('color-secondary'),
            accent: this.getFieldValue('color-accent'),
            neutral: this.getFieldValue('color-neutral')
        };
    }

    getFieldValue(fieldId) {
        const field = document.getElementById(fieldId);
        return field ? field.value : '';
    }

    async autoSave(section = null) {
        this.collectFormData();
        
        try {
            // En production, on enverrait au serveur
            // await this.saveToServer();
            
            // Pour la demo, on sauvegarde en localStorage
            localStorage.setItem('remmailleuse-admin-data', JSON.stringify(this.data));
            
            this.hasUnsavedChanges = false;
            const sectionName = section ? `section "${section}"` : 'modifications';
            this.showStatus(`‚úÖ ${sectionName.charAt(0).toUpperCase() + sectionName.slice(1)} sauvegard√©e(s) !`, 'success');
            
        } catch (error) {
            // Erreur de sauvegarde
            this.showStatus('‚ùå Erreur lors de la sauvegarde', 'error');
        }
    }

    async saveAll() {
        this.showLoading('Sauvegarde en cours...');
        
        try {
            await this.autoSave();
            this.hideLoading();
            this.showStatus('üíæ Toutes les modifications ont √©t√© sauvegard√©es !', 'success');
        } catch (error) {
            this.hideLoading();
            this.showStatus('‚ùå Erreur lors de la sauvegarde compl√®te', 'error');
        }
    }

    // ===== FONCTIONS UTILITAIRES =====
    markAsChanged() {
        this.hasUnsavedChanges = true;
        
        // Indicateur visuel
        const currentSectionLink = document.querySelector('.sidebar-link.active');
        if (currentSectionLink && !currentSectionLink.textContent.includes('*')) {
            currentSectionLink.textContent += ' *';
        }
    }

    setupAutosave() {
        // Auto-save toutes les 30 secondes
        this.autosaveInterval = setInterval(() => {
            if (this.hasUnsavedChanges) {
                this.autoSave();
            }
        }, 30000);

        // Auto-save sur changement des inputs
        document.addEventListener('input', (e) => {
            if (e.target.matches('.form-input')) {
                this.markAsChanged();
            }
        });
    }

    setupEventListeners() {
        // Liens de navigation
        document.querySelectorAll('.sidebar-link').forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const sectionId = link.getAttribute('href').substring(1);
                this.showSection(sectionId, link);
            });
        });

        // Validation des formulaires
        document.addEventListener('change', (e) => {
            if (e.target.matches('input[type="email"]')) {
                this.validateEmail(e.target);
            } else if (e.target.matches('input[type="tel"]')) {
                this.validatePhone(e.target);
            } else if (e.target.matches('input[type="color"]')) {
                this.previewColorChange(e.target);
            }
        });

        // Raccourcis clavier
        document.addEventListener('keydown', (e) => {
            if (e.ctrlKey || e.metaKey) {
                if (e.key === 's') {
                    e.preventDefault();
                    this.autoSave(this.currentSection);
                }
            }
        });
    }

    validateEmail(input) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        const isValid = emailRegex.test(input.value);
        
        input.style.borderColor = isValid ? 'var(--color-success)' : 'var(--color-error)';
        
        let feedback = input.nextElementSibling;
        if (!feedback || !feedback.classList.contains('form-feedback')) {
            feedback = document.createElement('div');
            feedback.className = 'form-feedback';
            input.parentNode.appendChild(feedback);
        }
        
        feedback.textContent = isValid ? '‚úÖ Email valide' : '‚ùå Format d\'email invalide';
        feedback.className = `form-feedback ${isValid ? 'form-success' : 'form-error'}`;
    }

    validatePhone(input) {
        const phoneRegex = /^\+?[\d\s\.\-\(\)]{8,}$/;
        const isValid = phoneRegex.test(input.value);
        
        input.style.borderColor = isValid ? 'var(--color-success)' : 'var(--color-error)';
    }

    previewColorChange(input) {
        const colorName = input.id.replace('color-', '');
        document.documentElement.style.setProperty(`--color-${colorName}`, input.value);
    }

    applyThemePreview() {
        const colors = {
            primary: this.getFieldValue('color-primary'),
            secondary: this.getFieldValue('color-secondary'),
            accent: this.getFieldValue('color-accent'),
            neutral: this.getFieldValue('color-neutral')
        };

        Object.entries(colors).forEach(([name, value]) => {
            if (value) {
                document.documentElement.style.setProperty(`--color-${name}`, value);
            }
        });

        this.showStatus('üé® Aper√ßu des couleurs appliqu√© !', 'info');
    }

    // ===== FONCTIONS GLOBALES =====
    previewSite() {
        // Sauvegarder avant la pr√©visualisation
        this.autoSave().then(() => {
            window.open('../index.html', '_blank');
        });
    }

    exportData() {
        this.collectFormData();
        
        const dataStr = JSON.stringify(this.data, null, 2);
        const dataBlob = new Blob([dataStr], { type: 'application/json' });
        const url = URL.createObjectURL(dataBlob);
        
        const link = document.createElement('a');
        link.href = url;
        link.download = `remmailleuse-backup-${new Date().toISOString().split('T')[0]}.json`;
        link.click();
        
        URL.revokeObjectURL(url);
        this.showStatus('üì§ Donn√©es export√©es !', 'success');
    }

    importData(fileInput) {
        const file = fileInput.files[0];
        if (!file) return;

        const reader = new FileReader();
        reader.onload = (e) => {
            try {
                const importedData = JSON.parse(e.target.result);
                this.data = { ...this.data, ...importedData };
                this.populateFields();
                this.renderProcessSteps();
                this.renderGalleryItems();
                this.renderServiceItems();
                this.markAsChanged();
                this.showStatus('üì• Donn√©es import√©es avec succ√®s !', 'success');
            } catch (error) {
                this.showStatus('‚ùå Erreur lors de l\'import : fichier invalide', 'error');
            }
        };
        reader.readAsText(file);
    }

    // ===== UI HELPERS =====
    showLoading(message = 'Chargement...') {
        const modal = document.getElementById('loading-modal');
        if (modal) {
            modal.style.display = 'flex';
            const messageEl = modal.querySelector('p');
            if (messageEl) messageEl.textContent = message;
        }
    }

    hideLoading() {
        const modal = document.getElementById('loading-modal');
        if (modal) {
            modal.style.display = 'none';
        }
    }

    showStatus(message, type = 'success') {
        const statusBar = document.getElementById('status-bar');
        if (!statusBar) return;

        const icons = {
            success: '‚úÖ',
            error: '‚ùå',
            warning: '‚ö†Ô∏è',
            info: '‚ÑπÔ∏è'
        };

        statusBar.innerHTML = `${icons[type]} ${message}`;
        statusBar.className = `status-bar show ${type}`;

        // Auto-hide apr√®s 4 secondes
        setTimeout(() => {
            statusBar.classList.remove('show');
        }, 4000);
    }

    confirmAction(title, message, callback) {
        const modal = document.getElementById('confirm-modal');
        const titleEl = document.getElementById('confirm-title');
        const messageEl = document.getElementById('confirm-message');
        const confirmBtn = document.getElementById('confirm-action');

        if (titleEl) titleEl.textContent = title;
        if (messageEl) messageEl.textContent = message;
        
        if (modal) modal.style.display = 'flex';

        confirmBtn.onclick = () => {
            callback();
            this.closeConfirmModal();
        };
    }

    closeConfirmModal() {
        const modal = document.getElementById('confirm-modal');
        if (modal) modal.style.display = 'none';
    }
}

// ===== FONCTIONS GLOBALES POUR L'HTML =====
function showSection(sectionId, linkElement) {
    if (window.adminApp) {
        window.adminApp.showSection(sectionId, linkElement);
    }
}

function autoSave(section) {
    if (window.adminApp) {
        window.adminApp.autoSave(section);
    }
}

function saveAll() {
    if (window.adminApp) {
        window.adminApp.saveAll();
    }
}

function previewSite() {
    if (window.adminApp) {
        window.adminApp.previewSite();
    }
}

function exportData() {
    if (window.adminApp) {
        window.adminApp.exportData();
    }
}

function addGalleryItem() {
    if (window.adminApp) {
        window.adminApp.addGalleryItem();
    }
}

function addService() {
    if (window.adminApp) {
        window.adminApp.addService();
    }
}

function addProcessStep() {
    if (window.adminApp) {
        window.adminApp.addProcessStep();
    }
}

function applyThemePreview() {
    if (window.adminApp) {
        window.adminApp.applyThemePreview();
    }
}

function closeConfirmModal() {
    if (window.adminApp) {
        window.adminApp.closeConfirmModal();
    }
}

// ===== INITIALISATION =====
document.addEventListener('DOMContentLoaded', () => {
    window.adminApp = new AdminApp();
    
    // Interface d'administration initialis√©e
    
    // Gestion des fichiers d'import
    const importInput = document.getElementById('import-data');
    if (importInput) {
        importInput.addEventListener('change', (e) => {
            window.adminApp.importData(e.target);
        });
    }
    
    // Gestion du drag & drop pour l'import
    document.addEventListener('dragover', (e) => {
        e.preventDefault();
    });
    
    document.addEventListener('drop', (e) => {
        e.preventDefault();
        const files = e.dataTransfer.files;
        if (files.length > 0 && files[0].type === 'application/json') {
            const fakeInput = { files: [files[0]] };
            window.adminApp.importData(fakeInput);
        }
    });
});

// ===== GESTION DES ERREURS =====
window.addEventListener('error', (e) => {
    // Erreur JavaScript Admin
    if (window.adminApp) {
        window.adminApp.showStatus('‚ùå Une erreur est survenue', 'error');
    }
});

window.addEventListener('unhandledrejection', (e) => {
    // Promise rejet√©e Admin
    if (window.adminApp) {
        window.adminApp.showStatus('‚ùå Erreur de traitement', 'error');
    }
});

// ===== SAUVEGARDE AVANT FERMETURE =====
window.addEventListener('beforeunload', (e) => {
    if (window.adminApp && window.adminApp.hasUnsavedChanges) {
        e.preventDefault();
        e.returnValue = 'Vous avez des modifications non sauvegard√©es. √ätes-vous s√ªr de vouloir quitter ?';
        return e.returnValue;
    }
});

// ===== UTILITAIRES SUPPL√âMENTAIRES =====

/**
 * Validation en temps r√©el des formulaires
 */
class FormValidator {
    static validateRequired(input) {
        const isValid = input.value.trim() !== '';
        FormValidator.setValidationState(input, isValid, isValid ? '' : 'Ce champ est obligatoire');
        return isValid;
    }
    
    static validateEmail(input) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        const isValid = emailRegex.test(input.value);
        FormValidator.setValidationState(input, isValid, isValid ? '' : 'Format d\'email invalide');
        return isValid;
    }
    
    static validatePhone(input) {
        const phoneRegex = /^\+?[\d\s\.\-\(\)]{8,}$/;
        const isValid = phoneRegex.test(input.value);
        FormValidator.setValidationState(input, isValid, isValid ? '' : 'Format de t√©l√©phone invalide');
        return isValid;
    }
    
    static validateUrl(input) {
        try {
            new URL(input.value);
            FormValidator.setValidationState(input, true, '');
            return true;
        } catch {
            FormValidator.setValidationState(input, false, 'URL invalide');
            return false;
        }
    }
    
    static setValidationState(input, isValid, message) {
        // Couleur de bordure
        input.style.borderColor = isValid ? 'var(--color-success)' : 'var(--color-error)';
        
        // Message de feedback
        let feedback = input.parentNode.querySelector('.form-feedback');
        if (!feedback) {
            feedback = document.createElement('div');
            feedback.className = 'form-feedback';
            input.parentNode.appendChild(feedback);
        }
        
        feedback.textContent = message;
        feedback.className = `form-feedback ${isValid ? 'form-success' : 'form-error'}`;
        feedback.style.display = message ? 'block' : 'none';
    }
}

/**
 * Gestionnaire d'images avec preview et compression
 */
class ImageHandler {
    static async handleImageUpload(file, maxSize = 5 * 1024 * 1024, quality = 0.8) {
        return new Promise((resolve, reject) => {
            if (file.size > maxSize) {
                reject(new Error(`Image trop volumineuse (max ${Math.round(maxSize / 1024 / 1024)}MB)`));
                return;
            }
            
            if (!file.type.startsWith('image/')) {
                reject(new Error('Le fichier doit √™tre une image'));
                return;
            }
            
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            const img = new Image();
            
            img.onload = () => {
                // Redimensionnement si n√©cessaire
                const maxWidth = 1200;
                const maxHeight = 800;
                
                let { width, height } = img;
                
                if (width > maxWidth) {
                    height = (height * maxWidth) / width;
                    width = maxWidth;
                }
                
                if (height > maxHeight) {
                    width = (width * maxHeight) / height;
                    height = maxHeight;
                }
                
                canvas.width = width;
                canvas.height = height;
                
                // Dessin et compression
                ctx.drawImage(img, 0, 0, width, height);
                const compressedDataUrl = canvas.toDataURL('image/jpeg', quality);
                
                resolve({
                    dataUrl: compressedDataUrl,
                    originalSize: file.size,
                    compressedSize: Math.round(compressedDataUrl.length * 0.75), // Approximation
                    dimensions: { width, height }
                });
            };
            
            img.onerror = () => reject(new Error('Erreur lors du chargement de l\'image'));
            img.src = URL.createObjectURL(file);
        });
    }
    
    static createImagePreview(dataUrl, container, options = {}) {
        const { 
            removable = true, 
            className = 'image-preview',
            onRemove = null 
        } = options;
        
        const preview = document.createElement('div');
        preview.className = className;
        
        const img = document.createElement('img');
        img.src = dataUrl;
        img.style.width = '100%';
        img.style.height = '100%';
        img.style.objectFit = 'cover';
        
        preview.appendChild(img);
        
        if (removable) {
            const removeBtn = document.createElement('button');
            removeBtn.className = 'image-remove-btn';
            removeBtn.innerHTML = '√ó';
            removeBtn.onclick = () => {
                preview.remove();
                if (onRemove) onRemove();
            };
            preview.appendChild(removeBtn);
        }
        
        container.appendChild(preview);
        return preview;
    }
}

/**
 * Gestionnaire de th√®mes et couleurs
 */
class ThemeManager {
    static applyColors(colors) {
        Object.entries(colors).forEach(([name, value]) => {
            if (value && this.isValidColor(value)) {
                document.documentElement.style.setProperty(`--color-${name}`, value);
            }
        });
    }
    
    static isValidColor(color) {
        const s = new Option().style;
        s.color = color;
        return s.color !== '';
    }
    
    static generateColorPalette(baseColor) {
        // G√©n√®re une palette de couleurs bas√©e sur une couleur de base
        const hsl = this.hexToHsl(baseColor);
        
        return {
            light: this.hslToHex(hsl.h, Math.max(0, hsl.s - 20), Math.min(100, hsl.l + 20)),
            dark: this.hslToHex(hsl.h, Math.min(100, hsl.s + 10), Math.max(0, hsl.l - 20)),
            muted: this.hslToHex(hsl.h, Math.max(0, hsl.s - 30), hsl.l),
            contrast: this.hslToHex((hsl.h + 180) % 360, hsl.s, hsl.l)
        };
    }
    
    static hexToHsl(hex) {
        const r = parseInt(hex.slice(1, 3), 16) / 255;
        const g = parseInt(hex.slice(3, 5), 16) / 255;
        const b = parseInt(hex.slice(5, 7), 16) / 255;
        
        const max = Math.max(r, g, b);
        const min = Math.min(r, g, b);
        let h, s, l = (max + min) / 2;
        
        if (max === min) {
            h = s = 0;
        } else {
            const d = max - min;
            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
            
            switch (max) {
                case r: h = (g - b) / d + (g < b ? 6 : 0); break;
                case g: h = (b - r) / d + 2; break;
                case b: h = (r - g) / d + 4; break;
            }
            h /= 6;
        }
        
        return { h: h * 360, s: s * 100, l: l * 100 };
    }
    
    static hslToHex(h, s, l) {
        l /= 100;
        const a = s * Math.min(l, 1 - l) / 100;
        const f = n => {
            const k = (n + h / 30) % 12;
            const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
            return Math.round(255 * color).toString(16).padStart(2, '0');
        };
        return `#${f(0)}${f(8)}${f(4)}`;
    }
}

/**
 * Gestionnaire de donn√©es locales avec backup
 */
class DataManager {
    static save(key, data) {
        try {
            const timestamp = new Date().toISOString();
            const dataWithMeta = {
                data,
                timestamp,
                version: '1.0'
            };
            
            localStorage.setItem(key, JSON.stringify(dataWithMeta));
            
            // Backup automatique
            this.createBackup(key, dataWithMeta);
            
            return true;
        } catch (error) {
            // Erreur de sauvegarde
            return false;
        }
    }
    
    static load(key) {
        try {
            const stored = localStorage.getItem(key);
            if (!stored) return null;
            
            const parsed = JSON.parse(stored);
            return parsed.data || parsed; // Compatibilit√© avec anciens formats
        } catch (error) {
            // Erreur de chargement
            return null;
        }
    }
    
    static createBackup(key, data) {
        const backupKey = `${key}_backup_${Date.now()}`;
        try {
            localStorage.setItem(backupKey, JSON.stringify(data));
            
            // Garder seulement les 5 derni√®res sauvegardes
            this.cleanupBackups(key);
        } catch (error) {
            // Impossible de cr√©er une sauvegarde
        }
    }
    
    static cleanupBackups(key) {
        const backupKeys = Object.keys(localStorage)
            .filter(k => k.startsWith(`${key}_backup_`))
            .sort()
            .reverse();
        
        // Supprimer les anciennes sauvegardes (garder les 5 plus r√©centes)
        backupKeys.slice(5).forEach(oldKey => {
            localStorage.removeItem(oldKey);
        });
    }
    
    static getBackups(key) {
        return Object.keys(localStorage)
            .filter(k => k.startsWith(`${key}_backup_`))
            .map(k => ({
                key: k,
                timestamp: new Date(parseInt(k.split('_').pop())),
                data: JSON.parse(localStorage.getItem(k))
            }))
            .sort((a, b) => b.timestamp - a.timestamp);
    }
}

// Exposition globale des utilitaires
window.FormValidator = FormValidator;
window.ImageHandler = ImageHandler;
window.ThemeManager = ThemeManager;
window.DataManager = DataManager;